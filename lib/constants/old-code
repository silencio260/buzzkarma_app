
from main.....auth code

void Initialize() {
    // TODO: $$$$ change this to  !isExpired and implement conditions for isExpired = true
    print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@222');

    if (!kDebugMode) {
      isExpired = Jwt.isExpired(kTempToken);
      if (isExpired) {
        authBox.put('token', kTempToken);
        token = authBox.get('token');
        Map<String, dynamic> payload = Jwt.parseJwt(token);
        userId = payload['user']['id'];
        authBox.put('id', userId);
        userController.onTest();
        print(token);
        print(userId);
      } else {
        print('======== token expired');
      }
    } else {
      token = authBox.get('token');
      isExpired = token != null ? Jwt.isExpired(token) : isExpired;
      // Or || isExpired
      if (token == null) {
        setState(() {
          print('&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&');
          if (widget.doneAuth) {
//            userController.fetchUser();
            kshowLoginPage = false;
          } else {
            kshowLoginPage = true;
          }
        });
      } else {
        setState(() {
//          print('**************************************8');
//          userController.fetchUser();
          kshowLoginPage = false;
        });
      }
    }
    print('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@999');
    print(token);
  }
******************************************************************
form main
      /*PersistentBottomNavBarItem(
        icon: Icon(Icons.add),
        title: ("Add"),
        activeColor: Colors.blueAccent,
        inactiveColor: Colors.grey,
        activeContentColor: Colors.blue,
      ), */

      //      PersistentBottomNavBarItem(
      //        icon: Icon(Icons.settings),
      //        title: ("Settings"),
      //        activeColor: Colors.indigo,
      //        inactiveColor: Colors.grey,
      //      ),


********************************************************************


 from profile
/*
SizedBox(
              height: 100.0,
            ),
            Container(
              margin: EdgeInsets.all(20.0),
              width: 300.00,
              child: RaisedButton(
                onPressed: () {
                  EnerReferralCode(context, controller.token);
                },
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(80.0)),
                elevation: 0.0,
                padding: EdgeInsets.all(0.0),
                child: Ink(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                        begin: Alignment.centerRight,
                        end: Alignment.centerLeft,
                        colors: [Colors.redAccent, Colors.pinkAccent]),
                    borderRadius: BorderRadius.circular(30.0),
                  ),
                  child: Container(
                    constraints: BoxConstraints(maxWidth: 300.0, minHeight: 50.0),
                    alignment: Alignment.center,
                    child: Text(
                      "Contact me",
                      style: TextStyle(
                          color: Colors.white, fontSize: 26.0, fontWeight: FontWeight.w300),
                    ),
                  ),
                ),
              ),
            ),

 */




















